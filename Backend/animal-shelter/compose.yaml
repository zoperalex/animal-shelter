# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
#  server:
#    build:
#      context: ../..
#    ports:
#      - 8443:8443
#    depends_on:
#      - postgres


# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
  postgres:
    image: postgres:16.3
    container_name: postgres_container
    hostname: postgres_host
    environment:
      POSTGRES_DB: animal_shelter
      POSTGRES_USER: animal_user
      POSTGRES_PASSWORD: animal_password
    volumes:
#      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
#    healthcheck:
#      test: [ "CMD-SHELL", "pg_isready -U animal_user" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5


  app:
    build: .
    container_name: animal_container
    hostname: animalhost
    depends_on:
      - postgres
#      postgres:
#          condition: service_healthy
    ports:
      - "8443:8443"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_container:5432/animal_shelter
      SPRING_DATASOURCE_USERNAME: animal_user
      SPRING_DATASOURCE_PASSWORD: animal_password

#volumes:
# postgres_data:


